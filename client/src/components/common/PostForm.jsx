import React, { useState } from "react";
import postApi from "../../api/postApi";
import { LoadingButton } from "@mui/lab";
import { Box, CardMedia, TextField } from "@mui/material";
import { grey } from "@mui/material/colors";
import ImageSearchIcon from "@mui/icons-material/ImageSearch";
import HideImageIcon from "@mui/icons-material/HideImage";

const PostForm = () => {
  const [itemImgURL, setItemImgURL] = useState("");
  const [itemImgURLErrText, setItemImgURLErrText] = useState("");
  const [descErrText, setDescErrText] = useState("");
  const [loading, setLoading] = useState(false);

  const onItemImgURLChange = async (e) => {
    setItemImgURLErrText("");
    const inputAmazonURL = e.target.value;

    const isValidAmazonUrl = (url) => {
      const pattern =
        /^(https?:\/\/)?(www\.)?amazon\.[a-z]{2,3}(\.[a-z]{2})?\/.*$/;
      return pattern.test(url);
    };

    if (!isValidAmazonUrl(inputAmazonURL)) {
      setItemImgURLErrText("AmazonÂïÜÂìÅ„ÅÆURL„ÇíË≤º„Çä‰ªò„Åë„Å¶„Åè„Å†„Åï„ÅÑ");
    }

    const startIndex = inputAmazonURL.indexOf("/dp/") + 4; // "/dp/"„ÅÆÂæå„ÅÆÊñáÂ≠ó„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÂèñÂæó
    const endIndex = startIndex + 10; // 10Ê°Å„ÅÆÊï∞Â≠ó„ÅÆÁµÇ‰∫Ü„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíË®àÁÆó
    const productId = inputAmazonURL.substring(startIndex, endIndex); // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çí‰ΩøÁî®„Åó„Å¶ÈÉ®ÂàÜÊñáÂ≠óÂàó„ÇíÊäΩÂá∫
    setItemImgURL(`https://images.amazon.com/images/P/${productId}.jpg`);
  };

  //„Éï„Ç©„Éº„É†„Åã„ÇâÂÖ•Âäõ„Åï„Çå„Åü„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„Çã„Åü„ÇÅ„ÅÆÂá¶ÁêÜ
  const handleSubmit = async (e) => {
    setItemImgURLErrText("");
    setDescErrText("");

    //„Éá„Éï„Ç©„É´„Éà„ÅÆ„Éï„Ç©„Éº„É†ÈÄÅ‰ø°Âãï‰Ωú„Çí„Ç≠„É£„É≥„Çª„É´
    e.preventDefault();
    //„Éï„Ç©„Éº„É†„ÅÆÊñáÂ≠óÂàó„ÇíÂèñÂæó(FormData„ÇØ„É©„Çπ„Çí‰ΩøÁî®)
    const data = new FormData(e.target);

    //textField„ÅÆnameÂ±ûÊÄß„ÅßÊåáÂÆö
    const desc = data.get("desc").trim();

    let error = false;

    if (itemImgURL === "") {
      error = true;
      setItemImgURLErrText("AmazonÂïÜÂìÅ„ÅÆURL„ÇíË≤º„Çä‰ªò„Åë„Å¶„Åè„Å†„Åï„ÅÑ");
    }
    if (desc === "") {
      error = true;
      setDescErrText("„Ç≥„É°„É≥„Éà„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
    }

    if (error) return;

    setLoading(true);

    //ÊäïÁ®øAPI
    try {
      await postApi.create({
        itemImgURL,
        desc,
      });
      setLoading(false);
      console.log("ÊäïÁ®ø„Å´ÊàêÂäü„Åó„Åæ„Åó„Åüüéâ");
    } catch (err) {
      //server/routes/auth.js„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Å´Âºï„Å£Êéõ„Åã„Å£„Åü„Çâ(„É¨„ÉÉ„Çπ„É≥55)
      // const errors = err.data.errors;

      // errors.forEach((err) => {
      //   if (err.param === "itemImgURL") {
      //     setItemImgURLErrText(err.msg);
      //   }
      //   if (err.param === "desc") {
      //     setDescErrText(err.msg);
      //   }
      // });
      setLoading(false);
    }
  };

  return (
    <Box
      component="form"
      onSubmit={handleSubmit}
      noValidate
      sx={{ display: "flex", flexDirection: "column", alignItems: "center" }}
    >
      <Box
        sx={{
          width: "100%",
          backgroundColor: grey[900],
          borderRadius: "3px",
          height: 250,
          position: "relative",
          // display: "flex",
          // justifyContent: "center",
          // alignItems: "center",
        }}
      >
        <ImageSearchIcon
          sx={{
            display: itemImgURL ? "none" : "block",
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
          }}
          fontSize="large"
        />
        <HideImageIcon
          sx={{
            display: itemImgURL ? "block" : "none",
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
          }}
          fontSize="large"
        />
        <CardMedia
          component="img"
          image={itemImgURL}
          alt="ÊäïÁ®ø„Åó„Åü„ÅÑÂïÜÂìÅ„ÅÆÁîªÂÉè"
          sx={{
            display: itemImgURL ? "block" : "none",
            p: 2,
            width: "100%",
            height: "100%",
            objectFit: "contain",
          }}
        />
      </Box>
      <TextField
        fullWidth
        id="itemImgURL"
        label="AmazonÂïÜÂìÅ„ÅÆURL"
        margin="normal"
        name="itemImgURL"
        required
        helperText={itemImgURLErrText}
        error={itemImgURLErrText !== ""}
        disabled={loading}
        // value={itemImgURL}
        onChange={onItemImgURLChange}
      />
      <TextField
        fullWidth
        id="desc"
        label="„Ç≥„É°„É≥„Éà"
        margin="normal"
        name="desc"
        multiline
        rows={4}
        required
        helperText={descErrText}
        error={descErrText !== ""}
        disabled={loading}
      />
      <LoadingButton
        sx={{ mt: 3, mb: 2 }}
        fullWidth
        type="submit"
        //mongodb„Å´Âá¶ÁêÜ‰∏≠„ÅØ„Éú„Çø„É≥„ÇíÊäº„Åõ„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã
        loading={loading}
        color="primary"
        variant="outlined"
      >
        ÊäïÁ®ø„Åô„Çã
      </LoadingButton>
    </Box>
  );
};

export default PostForm;
